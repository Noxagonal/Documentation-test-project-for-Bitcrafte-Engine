{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bitcrafte Engine","text":"<p>Bitcrafte engine is a 3D game engine written in modern C++. I'm developing primarily for myself. My plan is to build a \"proper\" game engine from the ground up, make it easy to use, resistant to crashes and intuitive to use.</p>"},{"location":"#purpose","title":"Purpose","text":"<p>This is primarily a passion project, meant to amuse myself, however I hope it will be useful to others as well some day.</p>"},{"location":"#current-development-status","title":"Current development status","text":"<p>Most of the foundation work is done, currently I'm writing some low level functions in the core. I'm still figuring out a few things as I go, nothing is final yet.</p>"},{"location":"For_Developers/","title":"Overview","text":""},{"location":"For_Developers/#how-to-navigate-the-source-code","title":"How to navigate the source code","text":"<p>Bitcrafte engine is a modular game engine made of several components.</p> <p>Best place to start is by looking at the overview of each of the engine components first. Each component is mostly self contained and name should give a good idea of what area each component focuses on, however some components depend directly on other components so before working on any single component, check the dependencies listing.</p> <p>A good place to start is the Core component as almost everything else depends on it.</p>"},{"location":"For_Developers/Engine_Components/","title":"Overview","text":"<p>Bitcrafte engine is a modular game engine made of several components.</p>"},{"location":"For_Developers/Engine_Components/#components","title":"Components","text":""},{"location":"For_Developers/Engine_Components/#build-configuration","title":"Build Configuration","text":"<p>This is primarily a configuration component which is used to detect which OS we're compiling on, which compiler we're using and what features are supported by the compiler.</p> <ul> <li>Responsibilities:<ul> <li>Pre-build configuration.</li> </ul> </li> </ul>"},{"location":"For_Developers/Engine_Components/#core","title":"Core","text":"<p>Core is the foundation of the engine. The core provides essential functionality that everything else is built upon. Core includes containers like List, Array, UniquePtr and others. Core also provides low level functions like conversion functions, exception handling and other diagnostic tools, printing, logging, etc. Core also provides some higher level functionality that the user is unlikely to directly interact with, like memory pool and thread pool.</p> <ul> <li>Responsibilities:<ul> <li>System boot and setup.</li> <li>Containers.</li> <li>Diagnostics.</li> <li>Memory handling.</li> <li>Task scheduling.</li> </ul> </li> </ul>"},{"location":"For_Developers/Engine_Components/#rhi","title":"RHI","text":"<p>Render Hardware Interface enables rendering to screen, it relies on more specific RHI components to do the actual rendering however.</p>"},{"location":"For_Developers/Engine_Components/#rhi_vulkan","title":"RHI_Vulkan","text":"<p>Render Hardware Interface using Vulkan backend.</p>"},{"location":"For_Developers/Engine_Components/#window-manager","title":"Window Manager","text":"<p>Window manager is an interface which enables window creation and HID input. It relies on more specific implementation.</p>"},{"location":"For_Developers/Engine_Components/#window-manager-win32","title":"Window Manager Win32","text":"<p>Window manager for Windows computers. This is only compiled on Windows computers.</p>"},{"location":"For_Developers/Engine_Components/#window-manager-wayland","title":"Window Manager Wayland","text":"<p>Window manager for Linux computers which support wayland. This is only compiled on Linux computers.</p>"},{"location":"For_Developers/Engine_Components/#window-manager-xlib","title":"Window Manager XLib","text":"<p>Window manager for Linux and other computers which support XOrg. This is only compiled on Linux and other operating systems that use XOrg.</p>"},{"location":"For_Developers/Engine_Components/#scene","title":"Scene","text":"<p>Scene contains everything related to the 3D world.</p>"},{"location":"For_Developers/Engine_Components/#ui","title":"UI","text":"<p>UI provides user interface, it keeps track of UI state and outputs rendering data.</p>"},{"location":"For_Developers/Engine_Components/Build_Configuration/","title":"Build configuration","text":"<p>Build configuration engine component is used to configure the project for a specific environment. This includes the operating system and the compiler.</p>"},{"location":"For_Developers/Engine_Components/Core/","title":"Core","text":"<p>Core contains the core functionality which everything else is build upon. This includes basic containers, exception handling, logging, memory pool, thread pool, etc.</p>"},{"location":"For_Developers/Engine_Components/Core/Containers/List/","title":"List","text":"<p>Provides a dynamically sized, heap allocated, continuous container similar to <code>std::vector</code>.</p>"},{"location":"For_Developers/Engine_Components/Core/Containers/List/#usage","title":"Usage","text":"<pre><code>auto list = bc::List&lt;int&gt;(); // Create an empty list.\nlist.Reserve( 64 ); // Reserve space for 64 elements.\nlist.PushBack( 1 ); // Push an integer to the back, size is now 1.\nlist.PushFront( 2 ); // Push an integer to the front, size is now 2.\n// At this point, list contents look like {2, 1};\n</code></pre>"},{"location":"For_Developers/Engine_Components/Core/Containers/Text/","title":"Text","text":"<p>Provides a dynamically sized, heap allocated, continuous container for text similar to <code>std::string</code> or <code>std::basic_string&lt;TYPE&gt;</code>.</p>"},{"location":"For_Developers/Engine_Components/Core/Containers/Text/#usage","title":"Usage","text":"<pre><code>auto char_text = bc::Text(); // Creates a `char` text container.\nauto c8_text = bc::Text8(); // Creates a `c8` (`char8_t`) text container.\nauto c16_text = bc::Text16(); // Creates a `c16` (`char16_t`) text container.\nauto c32_text = bc::Text32(); // Creates a `c32` (`char32_t`) text container. (Most used in engine)\n</code></pre>"},{"location":"For_Game_Developers/","title":"Overview","text":""},{"location":"For_Game_Developers/#getting-started","title":"Getting started","text":"<p>TODO...</p>"},{"location":"Testing/test/","title":"Test","text":""},{"location":"Testing/test/#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"Testing/test/#inline-code-block","title":"Inline code block","text":"<p>Some <code>inline code</code> goes here.</p>"},{"location":"Testing/test/#plain-codeblock","title":"Plain codeblock","text":"<p>Add a plain codeblock: test function<pre><code>auto test() -&gt; const char*\n{\n    return \"I dunno...\";\n}\n</code></pre></p>"}]}